name: Build and Release

on:
  push:
    branches: ["master"]

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build and Release
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Haskell
        uses: haskell-actions/setup@v2
        with:
          ghc-version: '9.6.6'
          cabal-version: '3.10.3.0'

      - name: Cache Cabal packages
        uses: actions/cache@v4.1.1
        with:
          path: |
            ~/.cabal/packages
            ~/.cabal/store
            dist-newstyle
          key: ${{ runner.os }}-ghc-9.6.6-cabal-${{ hashFiles('**/*.cabal', '**/cabal.project', '**/cabal.project.freeze') }}
          restore-keys: |
            ${{ runner.os }}-ghc-9.6.6-cabal-

      - name: Update Cabal package list
        run: cabal update

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y autoconf autogen automake libtool
          sudo apt-get install -y qtdeclarative5-dev libqt5quick5 qt5-image-formats-plugins qttools5-dev-tools qtbase5-dev

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install autoconf automake libtool
          brew install qt@5

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install autoconf automake libtool
          choco install qt5-default

      - name: Install secp256k1 Library
        run: |
          git clone https://github.com/bitcoin-core/secp256k1
          cd secp256k1
          git checkout v0.5.1
          ./autogen.sh
          ./configure --enable-module-schnorrsig --enable-module-extrakeys --enable-module-ecdh --enable-experimental --enable-module-recovery
          make
          sudo make install
          cd ..
        shell: bash

      - name: Set Library Path (Linux and macOS)
        if: runner.os != 'Windows'
        run: echo "/usr/local/lib" | sudo tee /etc/ld.so.conf.d/local.conf && sudo ldconfig
        shell: bash

      - name: Build with Cabal
        run: cabal build

      - name: Build Flatpak (Linux only)
        if: runner.os == 'Linux'
        run: ./build-flatpak.sh

      - name: Package for macOS
        if: runner.os == 'macOS'
        run: |
          mkdir -p Futr.app/Contents/MacOS
          cp $(cabal list-bin futr) Futr.app/Contents/MacOS/futr
          # Add any additional resources, icons, etc.
          hdiutil create -volname Futr -srcfolder Futr.app -ov -format UDZO Futr.dmg

      - name: Package for Windows
        if: runner.os == 'Windows'
        run: |
          mkdir Futr
          cp $(cabal list-bin futr) Futr/futr.exe
          # Add any additional DLLs, resources, etc.
          7z a Futr.zip Futr

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: continuous
          name: Continuous
          files: |
            futr.flatpak
            Futr.dmg
            Futr.zip
          prerelease: true
          body: "This is an automated continuous release."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  flatpak-build:
    name: Flatpak Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Flatpak and Flatpak Builder
        run: |
          sudo apt-get update
          sudo apt-get install -y flatpak flatpak-builder
          sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
          sudo flatpak install -y flathub org.kde.Platform//5.15-23.08 org.kde.Sdk//5.15-23.08
