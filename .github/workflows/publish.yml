name: Upload Release Assets

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  stack:
    name: ${{ matrix.os }} / ghc ${{ matrix.ghc }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        stack: ["2.7.3"]
        ghc: ["8.10.7"]

    steps:
      - uses: actions/checkout@v2

      - uses: haskell/actions/setup@v1.2
        name: Setup Haskell Stack
        with:
          ghc-version: ${{ matrix.ghc }}
          stack-version: ${{ matrix.stack }}

      - uses: actions/cache@v2
        name: Cache ~/.stack
        with:
          path: ~/.stack
          key: ${{ runner.os }}-${{ matrix.ghc }}-stack

      - name: Install dependencies
        run: |
          stack build --system-ghc --test --bench --no-run-tests --no-run-benchmarks --only-dependencies

      - name: Build
        run: |
          stack build --system-ghc --test --bench --no-run-tests --no-run-benchmarks --copy-bins --local-bin-path futr.AppDir/usr/bin

      - uses: addnab/docker-run-action@v3
        name: Create AppImage
        with:
          image: prolic/futr-dev:latest
          options: -v ${{ github.workspace }}:/app -w /app
          run: ./build-appimage.sh

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./futr-x86_64.AppImage
          asset_name: futr-x86_64.AppImage
          asset_content_type: application/x-executable
