name: CI

on:
  workflow_dispatch:
  pull_request:
    types: [synchronize, opened, reopened]
  push:
    branches: [master]
  schedule:
    # additionally run once per week (At 00:00 on Sunday) to maintain cache
    - cron: '0 0 * * 0'

jobs:
  stack:
    name: ${{ matrix.os }} / ghc ${{ matrix.ghc }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        stack: ["2.7.3"]
        ghc: ["8.10.7"]

    steps:
      - uses: actions/checkout@v2

      - uses: haskell/actions/setup@v1.2
        name: Setup Haskell Stack
        with:
          ghc-version: ${{ matrix.ghc }}
          stack-version: ${{ matrix.stack }}

      - uses: actions/cache@v2
        name: Cache ~/.stack
        with:
          path: ~/.stack
          key: ${{ runner.os }}-${{ matrix.ghc }}-stack

      - name: Install SDL2 + Glew for UI
        run: sudo apt-get install libsdl2-dev libglew-dev
        shell: sh

      - name: Fetch secp256k1 sources
        uses: sudosubin/git-clone-action@v1.0.1
        with:
          repository: 'bitcoin-core/secp256k1'
          platform: 'github'
          path: secp256k1

      - name: Install secp256k1
        run: |
             sudo apt-get install make autoconf
             cd secp256k1
             ./autogen.sh
             ./configure --enable-module-schnorrsig --enable-module-extrakeys --enable-module-ecdh --enable-experimental
             make
             sudo make install
             cd ..
             sudo ln -s /usr/local/lib/libsecp256k1.so.0 /usr/lib/libsecp256k1.so.0

      - name: Install dependencies
        run: |
          stack build --system-ghc --test --bench --no-run-tests --no-run-benchmarks --only-dependencies

      - name: Build
        run: |
          stack build --system-ghc --test --bench --no-run-tests --no-run-benchmarks --copy-bins --local-bin-path build

      - name: Get AppImage tools
        run: |
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage

      - name: Create AppImage
        run: ./build-appimage.sh
