name: Tests
on:
  pull_request:
  push:
    branches: ["master"]

jobs:
  generate-matrix:
    name: "Generate matrix from cabal"
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    runs-on: ubuntu-latest
    steps:
      - name: Extract the tested GHC versions
        id: set-matrix
        uses: kleidukos/get-tested@v0.1.7.1
        with:
          cabal-file: futr.cabal
          ubuntu-version: latest
          windows-version: latest
          version: 0.1.7.1

  tests:
    name: ${{ matrix.ghc }} on ${{ matrix.os }}
    needs: generate-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{ fromJSON(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: Checkout base repo
        uses: actions/checkout@v4

      - name: Setup MSYS2 (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            base
            mingw-w64-x86_64-toolchain
            git

      - name: Set up Haskell
        id: setup-haskell
        uses: haskell-actions/setup@v2
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: '3.10.3.0'

      - name: Cache Cabal packages
        uses: actions/cache@v4.2.3
        with:
          path: |
            ~/.cabal/packages
            ~/.cabal/store
            dist-newstyle
          key: ${{ runner.os }}-ghc-${{ matrix.ghc }}-cabal-${{ hashFiles('**/*.cabal', '**/cabal.project', '**/cabal.project.freeze') }}
          restore-keys: |
            ${{ runner.os }}-ghc-${{ matrix.ghc }}-cabal-

      - name: Update Cabal package list
        run: cabal update

      - name: Install Build Tools + LMDB (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y autoconf autogen automake libtool liblmdb-dev

      - name: Install Build Tools + LMDB (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          pacman -Syu
          pacman -S --noconfirm autoconf autogen automake libtool gcc git mingw-w64-x86_64-libunwind mingw-w64-x86_64-toolchain mingw-w64-x86_64-lmdb mingw-w64-x86_64-make mingw-w64-x86_64-cmake

      - name: Install Qt5 Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y qtdeclarative5-dev qml-module-qtquick-controls2 libqt5quick5 qt5-image-formats-plugins qtmultimedia5-dev qml-module-qtmultimedia qttools5-dev-tools qtbase5-dev

      - name: Install Qt5 Dependencies (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          pacman -S --noconfirm mingw-w64-x86_64-qt5-base mingw-w64-x86_64-qt5-declarative mingw-w64-x86_64-qt5-graphicaleffects mingw-w64-x86_64-qt5-imageformats mingw-w64-x86_64-qt5-multimedia mingw-w64-x86_64-qt5-quickcontrols2 mingw-w64-x86_64-qt5-svg mingw-w64-x86_64-qt5-tools mingw-w64-x86_64-qt5-translations mingw-w64-x86_64-qt5-winextras mingw-w64-x86_64-angleproject

      - name: Install secp256k1 Library (Linux)
        if: runner.os == 'Linux'
        run: |
          git clone https://github.com/bitcoin-core/secp256k1 && \
          cd secp256k1 && \
          git checkout v0.6.0 && \
          ./autogen.sh && \
          ./configure --enable-module-schnorrsig --enable-module-extrakeys --enable-module-ecdh --enable-experimental --enable-module-recovery && \
          make && \
          sudo make install && \
          cd ..

      - name: Install secp256k1 Library (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          git clone https://github.com/bitcoin-core/secp256k1 && \
          cd secp256k1 && \
          git checkout v0.6.0 && \
          ./autogen.sh && \
          ./configure --enable-module-schnorrsig \
            --enable-module-extrakeys \
            --enable-module-ecdh \
            --enable-module-recovery \
            --enable-experimental \
          make && \
          make install && \
          cp .libs/libsecp256k1-5.dll /mingw64/bin/ && \
          cd ..

      - name: Set Library Path (Linux)
        if: runner.os == 'Linux'
        run: echo "/usr/local/lib" | sudo tee /etc/ld.so.conf.d/local.conf && sudo ldconfig

      - name: Configure
        run: cabal configure --enable-tests

      - name: Build
        run: cabal build all

      - name: Test
        run: cabal test
