version: 1.0.{build}
image: Visual Studio 2022
build: off

branches:
  only:
    - master
    - /v\d+\.\d+\.\d+.*/

# Skip builds for pull requests to prevent interfering with continuous releases
skip_branch_with_pr: true

# Use MSYS2 environment  
environment:
  matrix:
    - MSYS2_ARCH: x86_64
      MSYSTEM: MINGW64

# Install dependencies
install:
  - choco source add -n mistuke -s https://www.myget.org/F/mistuke/api/v2
  - choco install -y cabal --version 3.10.2.0
  - choco install -y ghc --version 9.6.5
  - choco install -y msys2
  - choco install -y innosetup
  - refreshenv

before_build:
  - cabal --version
  - ghc --version
  - cabal update
  - cabal user-config init --force
  
  # Install MSYS2 build dependencies
  - C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm pacman-mirrors"
  - C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm git"
  - C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm mingw-w64-x86_64-gcc"
  - C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm mingw-w64-x86_64-make"
  - C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm mingw-w64-x86_64-qt5-base"
  - C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm mingw-w64-x86_64-qt5-declarative"
  - C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm mingw-w64-x86_64-qt5-graphicaleffects"
  - C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm mingw-w64-x86_64-qt5-imageformats"
  - C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm mingw-w64-x86_64-qt5-multimedia"
  - C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm mingw-w64-x86_64-qt5-quickcontrols2"
  - C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm mingw-w64-x86_64-qt5-svg"
  - C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm mingw-w64-x86_64-qt5-tools"
  - C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm mingw-w64-x86_64-qt5-translations"
  - C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm mingw-w64-x86_64-qt5-winextras"
  - C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm mingw-w64-x86_64-openssl"
  - C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm mingw-w64-x86_64-angleproject"
  - C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm mingw-w64-x86_64-lmdb"
  - C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm mingw-w64-x86_64-libunwind"
  - C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm mingw-w64-x86_64-toolchain"
  - C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm mingw-w64-x86_64-zlib"
  - C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm mingw-w64-x86_64-libwebp"
  - C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm mingw-w64-x86_64-libjpeg-turbo"
  - C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm mingw-w64-x86_64-giflib"
  - C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm autoconf autogen automake libtool make"

# Build script
build_script:  
  # Ensure C runtime library compatibility
  - C:\msys64\usr\bin\bash -lc "export PATH=/mingw64/bin:/usr/bin:\$PATH && gcc --version"

  # Clone dependencies
  - C:\msys64\usr\bin\bash -lc "cd /c/projects && git clone https://github.com/prolic/hsc2hs"
  - C:\msys64\usr\bin\bash -lc "cd /c/projects/hsc2hs && git checkout 339a832b7bfa4d8072bfc3911af7d2f4b03c432d"


  - C:\msys64\usr\bin\bash -lc "cd /c/projects && git clone https://github.com/prolic/HsQML"
  - C:\msys64\usr\bin\bash -lc "cd /c/projects/futr && cp cabal.project.windows cabal.project"

  # Build secp256k1 from source
  - C:\msys64\usr\bin\bash -lc "cd /c/projects && export PATH=/mingw64/bin:/usr/bin:\$PATH && git clone https://github.com/bitcoin-core/secp256k1 && cd secp256k1 && git checkout v0.5.1 && ./autogen.sh && ./configure --enable-module-schnorrsig --enable-module-extrakeys --enable-module-ecdh --enable-experimental --enable-module-recovery && make && make install"

  # Build
  - C:\msys64\usr\bin\bash -lc "cd /c/projects/futr && export PATH=/mingw64/bin:/c/tools/ghc-9.6.5/bin:/c/ProgramData/chocolatey/bin:/usr/bin:\$PATH && cabal configure --extra-include-dirs=C:/msys64/mingw64/include --extra-lib-dirs=C:/msys64/mingw64/lib"
  - C:\msys64\usr\bin\bash -lc "cd /c/projects/futr && export PATH=/mingw64/bin:/c/tools/ghc-9.6.5/bin:/c/ProgramData/chocolatey/bin:/usr/bin:\$PATH && cabal build"

  # Build Windows Installer
  - ps: |
      # Get version from futr.cabal
      $version = (Get-Content "futr.cabal" | Where-Object { $_ -match "^version:\s*(.+)" } | ForEach-Object { $matches[1].Trim() })
      Write-Host "Building installer for version: $version"
      
      # Prepare Inno Setup script from template
      $template = Get-Content "platform\windows\innosetup.iss.template"
      $script = $template -replace "@VERSION@", $version
      $script | Set-Content "platform\windows\innosetup.iss"

      # Prepare copy-dlls script from template
      $template = Get-Content "platform\windows\copy-dlls.sh.template"
      $script = $template -replace "@VERSION@", $version
      $script | Set-Content "platform\windows\copy-dlls.sh"

      # Prepare Windows resource file from template
      $template = Get-Content "platform\windows\futr.rc.template"
      $script = $template -replace "@VERSION@", $version
      $script | Set-Content "platform\windows\futr.rc"
      
      # Create dist directory if it doesn't exist
      if (-not (Test-Path "dist")) { New-Item -ItemType Directory -Path "dist" }
      
      # Deploy Qt dependencies
      C:\msys64\usr\bin\bash -lc "cd /c/projects/futr && export PATH=/mingw64/bin:/c/tools/ghc-9.6.5/bin:/c/ProgramData/chocolatey/bin:/usr/bin:`$PATH && windeployqt.exe dist-newstyle/build/x86_64-windows/ghc-9.6.5/futr-$version/build/futr/futr.exe --qmldir=resources/qml"
      
      # Copy additional DLLs
      C:\msys64\usr\bin\bash -lc "cd /c/projects/futr && export PATH=/mingw64/bin:/c/tools/ghc-9.6.5/bin:/c/ProgramData/chocolatey/bin:/usr/bin:\$PATH && bash ./platform/windows/copy-dlls.sh"
      
      # Clean up temporary build artifacts
      C:\msys64\usr\bin\bash -lc "cd /c/projects/futr && rm -rf dist-newstyle/build/x86_64-windows/ghc-9.6.5/futr-$version/build/futr/futr-tmp"
      
      # Create Installer Binary
      & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "platform\windows\innosetup.iss"

# Artifacts to collect
artifacts:
  - path: dist\futr-*-setup.exe
    name: futr-windows-installer

# Deploy to GitHub Releases
deploy:
  # Continuous builds from master branch
  - provider: GitHub
    tag: continuous
    release: üöß Development Build (Continuous)
    description: |
      ‚ö†Ô∏è This is an automated development build from the latest commit on the master branch.
      This build is not recommended for production use.
    artifact: futr-windows-installer
    auth_token: $(GITHUB_TOKEN)
    prerelease: true
    force_update: true
    on:
      branch: 
        - master

  # Tagged releases
  - provider: GitHub
    tag: $(APPVEYOR_REPO_TAG_NAME)
    release: Futr $(APPVEYOR_REPO_TAG_NAME)
    description: |
      üéâ Stable release of Futr $(APPVEYOR_REPO_TAG_NAME)

      This is a stable release build. See the changelog for details about what's new in this version.
    artifact: futr-windows-installer
    auth_token: $(GITHUB_TOKEN)
    prerelease: false
    on:
      APPVEYOR_REPO_TAG: true
